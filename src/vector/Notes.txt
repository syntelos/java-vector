
Documentation

  Employing RFC 2119 style.

  http://tools.ietf.org/html/rfc2119


Requirements

  1

    Scalable vector graphics paradigm resizes the window frame and content

    Scripting of static and dynamic window content via JPL subclasses

  2

    Media (e.g. JSON) define and update window content as a tree of named components

    Update deltas modify subtree components by specifying ancestors by name, not content

    Component names are array indeces from zero inclusive.

    Save JSON, Control-S, save to file
    Open JSON, Control-O, load from file

  3

    Plot static and dynamic data via original import/export data sets

    Data import, Control-I, load from file
    Data export, Control-E, save to file

      File I/O handler: built-in, class-name

    Data connect, Control-C, open socket

      Socket I/O handler: built-in, class-name

  4

    Drag and drop JSON window content

    Teleview window content via XMPP

    Print screen, Control-P, save to file

  5

    Tabbed window for multiple content panes


Imports

  Lessons learned from previous work 

  * Input coordinate space differs from the output coordinate space

    * A menu bar or display container will be inside the input space but outside the output space

  * The drawing of a component should not clip to the component

    * A component should be free to draw beyond its boundaries

      * For example borders decoration or content rotation

  * A coordinate local transform should be independent of the component parent transform

    * A component should be free to choose its internal transform/input/output strategy

  * Feature implementation should be defined via subclasses rather than enums

    * Feature definition via enum proposes an unmanageable and impractical application space 

  * Input events should be passed to a component as translated to its local coordinate space

    * Natural pattern

Design

  See src/vector/Component.java
  See src/vector/Event.java

Implementation

  See src/vector/Abstract.java, etc..
