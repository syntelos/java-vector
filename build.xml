<?xml version="1.0" encoding="UTF-8"?>
<project name="vector" default="vector-update-awt">

  <property name="src" value="src"/>
  <property name="ant" value="ant"/>
  <property name="bin" value="bin"/>
  <property name="lib" value="lib"/>
  <property name="dst" value="."/>

  <property name="platform.src" value="platform/src"/>
  <property name="awt.src" value="awt/src"/>
  <property name="android.src" value="android/src"/>
  <property name="demo.src" value="demo/src"/>
  <property name="geda.src" value="geda/src"/>
  <property name="fonview.src" value="fonview/src"/>
  <property name="xmpp.dir" value="xmpp"/>
  <property name="xmpp.src" value="${xmpp.dir}/src"/>
  <property name="llg.dir" value="llg"/>
  <property name="llg.src" value="${llg.dir}/src"/>

  <property name="compiler.source" value="1.5"/>
  <property name="compiler.target" value="1.5"/>
  <property name="compiler.debug" value="true"/>
  <property name="compiler.encoding" value="utf-8"/>

  <import file="ant/build.in.version.xml"/>
  <property file="${user.home}/update.properties"/>
  <import file="ant/build.in.update.xml"/>
  <import file="ant/build.in.android.xml"/>



  <path id="lib.path">

    <fileset dir="${lib}">
      <include name="**/*.jar" />
    </fileset>
  </path>


  <available property="available.signing.properties" file="signing.properties"/>

  <!--
    - 
    -->
  <target name="prove" description="Compile all packages">

    <antcall target="vector-jar-prove" inheritRefs="true"/>

    <antcall target="platform-jar" inheritRefs="true"/>

    <antcall target="awt-prove" inheritRefs="true"/>

    <antcall target="android-compile" inheritRefs="true"/>

    <antcall target="demo-prove" inheritRefs="true"/>
    <antcall target="geda-prove" inheritRefs="true"/>
    <antcall target="fonview-prove" inheritRefs="true"/>
    <antcall target="xmpp-prove" inheritRefs="true"/>

  </target>

  <target name="signed" description="Rebuild all jars and sign">

    <antcall target="vector-update-awt" inheritRefs="true"/>

    <antcall target="awt" inheritRefs="true"/>

    <antcall target="demo-update-awt" inheritRefs="true"/>
    <antcall target="geda-update-awt" inheritRefs="true"/>
    <antcall target="fonview-update-awt" inheritRefs="true"/>
    <antcall target="xmpp-sign-awt" inheritRefs="true"/>

  </target>

  <target name="unsigned" description="Rebuild all jars">

    <antcall target="vector-update-awt" inheritRefs="true"/>

    <antcall target="awt" inheritRefs="true"/>

    <antcall target="demo-update-awt" inheritRefs="true"/>
    <antcall target="geda-update-awt" inheritRefs="true"/>
    <antcall target="fonview-update-awt" inheritRefs="true"/>
    <antcall target="xmpp-update-awt" inheritRefs="true"/>

  </target>

  <target name="help" description="Overview">
    <echo>

      A number of processes have been defined here for proving
      portability, and building libraries and demos.  The processes
      themselves are very basic, but numerous.  This script just glues
      together the correct identifiers for a convenient, productive,
      and reproducible process.

      Some of the corner cases that are implied by the rules and
      scripts defined here are unintended.  For example,
      vector-X.Y.Z.jar can be generated with manifest class-path for
      the portability proof vector-platform-X.Y.Z.jar and then
      accidently employed in a runtime.

      The primary entry points have target names without hyphens.  See
      "ant -p" for a listing.

      The "ant signed" and "ant unsigned" entry points are employed
      for producing operational runtimes.

      The "prove" entry points are employed for a compilation test of
      portability.  These products have no runtime.  In a runtime,
      these binaries will produce "java.lang.NoSuchMethodError".

    </echo>
  </target>

  <!-- 
    - PLATFORM
    -->
  <target name="platform-vector" description="Platform dev check cycle">

    <antcall target="platform-jar" inheritRefs="true"/>

    <antcall target="vector-jar-prove" inheritRefs="true"/>

    <antcall target="platform-jar" inheritRefs="true"/>

  </target>

  <target name="platform-jar" depends="platform-compile" description="Package platform jar, clean bin.">


    <echo message="Class-Path: ${platform.lib.path.manifest}"/>

    <delete file="${existing.platform.jar}"/>

    <jar jarfile="${target.platform.jar}" basedir="${bin}" >
      <manifest>

        <attribute name="Class-Path" value="${platform.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="platform-compile" depends="platform-version">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${platform.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.vector.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="platform-prove" depends="version">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${platform.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${target.vector.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="platform-version" unless="platform.lib.path.manifest" depends="version">

    <java outputproperty="platform.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true">
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - AWT
    -->
  <target name="awt" if="vector.awt.update" depends="awt-jar" description="Copy jar product to targets defined in '{user.home}/update.properties' by name 'vector.awt.update'.">

    <do-update src="${target.awt.jar}" tgt="${vector.awt.update}" />
  </target>

  <target name="awt-jar" depends="awt-compile" description="Package awt jar, clean bin.">

    <echo message="Main-Class: platform.Frame"/>
    <echo message="Class-Path: ${awt.lib.path.manifest}"/>

    <delete file="${existing.awt.jar}"/>

    <jar jarfile="${target.awt.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="platform.Frame"/>
        <attribute name="Class-Path" value="${awt.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="awt-compile" depends="awt-version">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${awt.src}" includes="**/*.properties"/>
      <fileset dir="${awt.src}" includes="**/*.txt"/>
      <fileset dir="${awt.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${awt.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.vector.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="awt-prove" depends="version">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${awt.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${target.vector.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="awt-version" depends="version">

    <java outputproperty="awt.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true">
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - ANDROID
    -->
  <target name="android-vector" description="Calls android, vector-update-android">

    <antcall target="android" inheritRefs="true"/>

    <antcall target="vector-update-android" inheritRefs="true"/>
  </target>


  <target name="android" if="vector.android.update" depends="android-jar" description="Compile, archive, and copy to targets defined in '{user.home}/update.properties'.">

    <do-update src="${target.android.jar}" tgt="${vector.android.update}" />
  </target>

  <target name="android-jar" depends="android-compile" description="Package android jar, clean bin.">

    <echo message="Class-Path: ${android.lib.path.manifest}"/>

    <delete file="${existing.android.jar}"/>

    <jar jarfile="${target.android.jar}" basedir="${bin}" >
      <manifest>

        <attribute name="Class-Path" value="${android.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="android-compile" depends="android-version">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${android.src}" includes="**/*.properties"/>
      <fileset dir="${android.src}" includes="**/*.txt"/>
      <fileset dir="${android.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" includeJavaRuntime="false" srcdir="${android.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${target.vector.jar}"/>
      </classpath>
      <bootclasspath>
        <pathelement location="${android.rt.jar}"/>
      </bootclasspath>
    </javac>
  </target>

  <target name="android-version" depends="version">

    <define-android-rt api="10" property="android.rt.jar" />

    <fail message="Failed android.rt.jar">
      <condition>
        <not>
          <isset property="android.rt.jar"/>
        </not>
      </condition>
    </fail>

    <java outputproperty="android.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true">
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - DEMO
    -->
  <target name="demo-update-awt" depends="demo-compile-awt" description="Package demo jar, clean bin.  Depends on the target jar.">

    <echo message="Main-Class: platform.Frame"/>
    <echo message="Class-Path: ${demo.lib.path.manifest}"/>

    <delete file="${existing.demo.jar}"/>

    <jar jarfile="${target.demo.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="platform.Frame"/>
        <attribute name="Class-Path" value="${demo.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="demo-compile-awt" depends="demo-version-awt">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${demo.src}" includes="**/*.properties"/>
      <fileset dir="${demo.src}" includes="**/*.txt"/>
      <fileset dir="${demo.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${demo.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.vector.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="demo-prove" depends="version" description="Compile against platform for proof of portability.">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${demo.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${target.vector.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="demo-version-awt" unless="demo.lib.path.manifest" depends="version">

    <java outputproperty="demo.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - GEDA
    -->
  <target name="geda-update-awt" depends="geda-compile-awt" description="Package geda jar, clean bin.  Depends on the target jar.">

    <echo message="Main-Class: geda.Frame"/>
    <echo message="Class-Path: ${geda.lib.path.manifest}"/>

    <delete file="${existing.geda.jar}"/>

    <jar jarfile="${target.geda.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="geda.Frame"/>
        <attribute name="Class-Path" value="${geda.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="geda-compile-awt" depends="geda-version-awt">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${geda.src}" includes="**/*.properties"/>
      <fileset dir="${geda.src}" includes="**/*.txt"/>
      <fileset dir="${geda.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${geda.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${existing.vector.jar}"/>
        <pathelement location="${existing.awt.jar}"/>
        <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="geda-prove" depends="version" description="Compile against platform for proof of portability.">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${geda.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${existing.platform.jar}"/>
        <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="geda-version-awt" unless="geda.lib.path.manifest" depends="version">

    <java outputproperty="geda.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - FONVIEW
    -->
  <target name="fonview-update-awt" depends="fonview-compile-awt" description="Package fonview jar, clean bin.  Depends on the target jar.">

    <echo message="Main-Class: fonview.Frame"/>
    <echo message="Class-Path: ${fonview.lib.path.manifest}"/>

    <delete file="${existing.fonview.jar}"/>

    <jar jarfile="${target.fonview.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="fonview.Frame"/>
        <attribute name="Class-Path" value="${fonview.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="fonview-compile-awt" depends="fonview-version-awt">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${fonview.src}" includes="**/*.properties"/>
      <fileset dir="${fonview.src}" includes="**/*.txt"/>
      <fileset dir="${fonview.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${fonview.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${existing.vector.jar}"/>
        <pathelement location="${existing.awt.jar}"/>
        <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="fonview-prove" depends="version" description="Compile against platform for proof of portability.">

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${fonview.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${existing.platform.jar}"/>
        <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="fonview-version-awt" unless="fonview.lib.path.manifest" depends="version">

    <java outputproperty="fonview.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - XMPPP
    -->
  <target name="xmpp-sign-awt" if="available.signing.properties" depends="xmpp-jar-awt" description="Sign jars required by xmpp.jnlp">

    <property file="signing.properties"/>

    <fail unless="sign.keystore">
      Missing property "sign.keystore" in "signing.properties" 
    </fail>
    <fail unless="sign.alias">
      Missing property "sign.alias" in "signing.properties" 
    </fail>
    <fail unless="sign.storepass">
      Missing property "sign.storepass" in "signing.properties" 
    </fail>
    <fail unless="sign.keypass">
      Missing property "sign.keypass" in "signing.properties" 
    </fail>

    <signjar keystore="${sign.keystore}" alias="${sign.alias}" storepass="${sign.storepass}" keypass="${sign.keypass}">

      <path>
        <pathelement location="${target.awt.jar}"/>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${target.xmpp.jar}"/>
        <path refid="lib.path" />
        <path refid="xmpp.lib.path" />
      </path>
    </signjar>

  </target>
  <target name="xmpp-update-awt" if="vector.xmpp.update" depends="xmpp-jar-awt" description="Compile, archive, and copy to targets defined in '{user.home}/update.properties'.">

    <do-update src="${target.xmpp.jar}" tgt="${vector.xmpp.update}" />
  </target>

  <target name="xmpp-jar-awt" depends="xmpp-compile-awt" description="Package xmpp jar, clean bin.  Depends on the target jar.">

    <echo message="Main-Class: xmpp.Frame"/>

    <delete file="${existing.xmpp.jar}"/>

    <jar jarfile="${target.xmpp.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="xmpp.Frame"/>
        <attribute name="Class-Path" value="${xmpp.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="xmpp-compile-awt" depends="xmpp-version">

    <echo message="Class-Path: ${xmpp.lib.path.manifest}"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${xmpp.src}" includes="**/*.properties"/>
      <fileset dir="${xmpp.src}" includes="**/*.txt"/>
      <fileset dir="${xmpp.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${xmpp.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${existing.vector.jar}"/>
        <pathelement location="${existing.awt.jar}"/>
        <path refid="lib.path"/>
        <path refid="xmpp.lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="xmpp-prove" depends="xmpp-version" description="Compile against platform for proof of portability.">

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${xmpp.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${existing.platform.jar}"/>
        <path refid="lib.path"/>
        <path refid="xmpp.lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="xmpp-version" unless="xmpp.lib.path.manifest" depends="version">

    <path id="xmpp.lib.path">

      <fileset dir="${xmpp.dir}/lib">
        <include name="**/*.jar" />
      </fileset>
    </path>

    <java outputproperty="xmpp.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
      <arg value="${toString:xmpp.lib.path}"/>
    </java>
  </target>

  <!--
    - JOGL
    -->
  <target name="jogl-update-awt" if="vector.jogl.update" depends="jogl-jar-awt" description="Compile, archive, and copy to targets defined in '{user.home}/update.properties'.">

    <do-update src="${target.jogl.jar}" tgt="${vector.jogl.update}" />
  </target>

  <target name="jogl-jar-awt" depends="jogl-compile-awt" description="Package jogl jar, clean bin.  Depends on the target jar.">

    <echo message="Main-Class: platform.Frame"/>
    <echo message="Class-Path: ${jogl.lib.path.manifest}"/>

    <delete file="${existing.jogl.jar}"/>

    <jar jarfile="${target.jogl.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="platform.Frame"/>
        <attribute name="Class-Path" value="${jogl.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="jogl-compile-awt" depends="jogl-version">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${jogl.src}" includes="**/*.properties"/>
      <fileset dir="${jogl.src}" includes="**/*.txt"/>
      <fileset dir="${jogl.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${jogl.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${existing.vector.jar}"/>
        <pathelement location="${existing.awt.jar}"/>
        <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="jogl-prove" depends="version" description="Compile against platform for proof of portability.">

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${jogl.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${existing.platform.jar}"/>
        <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="jogl-version" unless="jogl.lib.path.manifest" depends="version">

    <java outputproperty="jogl.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  
  <target name="llg-update-awt" depends="llg-compile-awt" description="Compile, archive, and copy to targets defined in '{user.home}/update.properties'.">

    <echo message="Main-Class: llg.Fullscreen"/>
    <echo message="Class-Path: ${llg.lib.path.manifest}"/>

    <delete file="${existing.llg.jar}"/>

    <jar jarfile="${target.llg.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="llg.Fullscreen"/>
        <attribute name="Class-Path" value="${llg.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="llg-compile-awt" depends="llg-version">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}/fonts">
      <fileset dir="${llg.dir}/fonts" includes="**/futural.jhf,**/markers.jhf"/>
    </copy>
    <copy todir="${bin}/models">
      <fileset dir="${llg.dir}/models" includes="**/*.emf"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${llg.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${existing.vector.jar}"/>
        <pathelement location="${existing.awt.jar}"/>
        <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="llg-prove" depends="version" description="Compile against platform for proof of portability.">

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${llg.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${existing.platform.jar}"/>
        <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="llg-version" unless="llg.lib.path.manifest" depends="version">

    <java outputproperty="llg.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!--
    - VECTOR
    -->
  <target name="vector-platform" description="Platform dev check cycle">

    <antcall target="vector-jar-prove" inheritRefs="true"/>

    <antcall target="platform-jar" inheritRefs="true"/>

    <antcall target="vector-jar-prove" inheritRefs="true"/>
  </target>

  <target name="vector-awt" description="Calls vector-update-awt, awt">

    <antcall target="vector-update-awt" inheritRefs="true"/>

    <antcall target="awt" inheritRefs="true"/>
  </target>

  <target name="vector-android" description="Calls vector-update-android, android">

    <antcall target="vector-update-android" inheritRefs="true"/>

    <antcall target="android" inheritRefs="true"/>
  </target>

  <target name="vector-update-awt" if="vector.update" depends="vector-jar-awt" description="Compile, archive, and copy to targets defined in '{user.home}/update.properties'.">

    <do-update src="${target.vector.jar}" tgt="${vector.update}" />
  </target>

  <target name="vector-jar-awt" depends="vector-compile-awt" description="Package bin to target jar, clean bin.">

    <echo message="Main-Class: platform.Frame"/>
    <echo message="Class-Path: ${vector.lib.path.manifest.awt}"/>

    <delete file="${existing.vector.jar}"/>
    <jar jarfile="${target.vector.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="platform.Frame"/>
        <attribute name="Class-Path" value="${vector.lib.path.manifest.awt}"/>
      </manifest>
    </jar>
    <delete dir="${bin}"/>
  </target>

  <target name="vector-compile-awt" depends="vector-version-awt" description="Compile src to bin">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${src}" includes="**/*.properties"/>
      <fileset dir="${src}" includes="**/*.txt"/>
      <fileset dir="${src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           classpathref="lib.path" source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.awt.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="vector-update-android" if="vector.update" depends="vector-jar-android" description="Compile, archive, and copy to targets defined in '{user.home}/update.properties'.">

    <do-update src="${target.vector.jar}" tgt="${vector.update}" />
  </target>

  <target name="vector-jar-android" depends="vector-compile-android" description="Package bin to target jar, clean bin.">

    <echo message="Class-Path: ${vector.lib.path.manifest.android}"/>

    <delete file="${existing.vector.jar}"/>
    <jar jarfile="${target.vector.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="platform.Frame"/>
        <attribute name="Class-Path" value="${vector.lib.path.manifest.android}"/>
      </manifest>
    </jar>
    <delete dir="${bin}"/>
  </target>

  <target name="vector-compile-android" depends="vector-version-android" description="Compile src to bin">
    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${src}" includes="**/*.properties"/>
      <fileset dir="${src}" includes="**/*.txt"/>
      <fileset dir="${src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           classpathref="lib.path" source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.android.jar}"/>
        <pathelement location="${android.rt.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="vector-jar-prove" unless="cond.vector.jar.prove" depends="vector-prove" description="Package bin to target jar, clean bin.">

    <property name="cond.vector.jar.prove" value="false"/>


    <echo message="Class-Path: ${vector.lib.path.manifest.prove}"/>

    <delete file="${existing.vector.jar}"/>
    <jar jarfile="${target.vector.jar}" basedir="${bin}" >
      <manifest>

        <attribute name="Class-Path" value="${vector.lib.path.manifest.prove}"/>
      </manifest>
    </jar>
    <delete dir="${bin}"/>
  </target>

  <target name="vector-prove" unless="cond.vector.prove" depends="vector-version-prove" description="Compile against platform for proof of portability.">

    <property name="cond.vector.prove" value="false"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           classpathref="lib.path" source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.platform.jar}"/>
      </classpath>
    </javac>
  </target>
 
  <target name="vector-version-awt" unless="vector.lib.path.manifest.awt" depends="version">

    <java outputproperty="vector.lib.path.manifest.awt" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <target name="vector-version-android" unless="vector.lib.path.manifest.android" depends="android-version">

    <java outputproperty="vector.lib.path.manifest.android" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.android.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

 <target name="vector-version-prove" unless="vector.lib.path.manifest.prove" depends="version">

    <java outputproperty="vector.lib.path.manifest.prove" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.platform.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!--
    - 
    -->
  <target name="clean" description="Delete products">
    <delete dir="${bin}"/>
  </target>

  <!--
    - VERSION
    -->
  <target name="version" unless="this.version" description="Report current version.">
    <version/>
    <property name="target.vector.jar" value="${dst}/${ant.project.name}-${this.version}.jar"/>
    <property name="target.platform.jar" value="${dst}/${ant.project.name}-platform-${this.version}.jar"/>
    <property name="target.awt.jar" value="${dst}/${ant.project.name}-awt-${this.version}.jar"/>
    <property name="target.android.jar" value="${dst}/${ant.project.name}-android-${this.version}.jar"/>
    <property name="target.demo.jar" value="${dst}/${ant.project.name}-demo-${this.version}.jar"/>
    <property name="target.geda.jar" value="${dst}/${ant.project.name}-geda-${this.version}.jar"/>
    <property name="target.fonview.jar" value="${dst}/${ant.project.name}-fonview-${this.version}.jar"/>
    <property name="target.xmpp.jar" value="${dst}/${ant.project.name}-xmpp-${this.version}.jar"/>
    <property name="target.jogl.jar" value="${dst}/${ant.project.name}-jogl-${this.version}.jar"/>
    <property name="target.llg.jar" value="${dst}/${ant.project.name}-llg-${this.version}.jar"/>

    <java outputproperty="existing.vector.jar" classpath="${ant}" classname="JarPublisher" failonerror="true" fork="true">
      <arg value="${ant.project.name}"/>
    </java>
    <java outputproperty="existing.platform.jar" classpath="${ant}" classname="JarPublisher" failonerror="true" fork="true">
      <arg value="${ant.project.name}-platform"/>
    </java>
    <java outputproperty="existing.awt.jar" classpath="${ant}" classname="JarPublisher" failonerror="true" fork="true">
      <arg value="${ant.project.name}-awt"/>
    </java>
    <java outputproperty="existing.android.jar" classpath="${ant}" classname="JarPublisher" failonerror="true" fork="true">
      <arg value="${ant.project.name}-android"/>
    </java>
    <java outputproperty="existing.demo.jar" classpath="${ant}" classname="JarPublisher" failonerror="true" fork="true">
      <arg value="${ant.project.name}-demo"/>
    </java>
    <java outputproperty="existing.geda.jar" classpath="${ant}" classname="JarPublisher" failonerror="true" fork="true">
      <arg value="${ant.project.name}-geda"/>
    </java>
    <java outputproperty="existing.fonview.jar" classpath="${ant}" classname="JarPublisher" failonerror="true" fork="true">
      <arg value="${ant.project.name}-fonview"/>
    </java>
    <java outputproperty="existing.xmpp.jar" classpath="${ant}" classname="JarPublisher" failonerror="true" fork="true">
      <arg value="${ant.project.name}-xmpp"/>
    </java>
    <java outputproperty="existing.jogl.jar" classpath="${ant}" classname="JarPublisher" failonerror="true" fork="true">
      <arg value="${ant.project.name}-jogl"/>
    </java>
    <java outputproperty="existing.llg.jar" classpath="${ant}" classname="JarPublisher" failonerror="true" fork="true">
      <arg value="${ant.project.name}-llg"/>
    </java>

  </target>

  <target name="build" description="Increment version build number and report result.">
    <version-build/>
    <version/>
  </target>

  <target name="major" description="Increment version major number and report result.">
    <version-major/>
    <version/>
  </target>

  <target name="minor" description="Increment version minor number and report result.">
    <version-minor/>
    <version/>
  </target>

</project>
