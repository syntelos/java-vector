<?xml version="1.0" encoding="UTF-8"?>
<project name="vector" default="unsigned-awt">

  <property name="src" value="src"/>
  <property name="ant" value="ant"/>
  <property name="bin" value="bin"/>
  <property name="lib" value="lib"/>
  <property name="dst" value="."/>

  <property name="prove.src" value="prove/src"/>
  <property name="prove.rt.jar" location="prove/rt.jar"/>
  <property name="awt.src" value="awt/src"/>
  <property name="android.src" value="android/src"/>
  <property name="demo.src" value="demo/src"/>
  <property name="geda.src" value="geda/src"/>
  <property name="fonview.src" value="fonview/src"/>
  <property name="xmpp.dir" value="xmpp"/>
  <property name="xmpp.src" value="${xmpp.dir}/src"/>
  <property name="llg.dir" value="llg"/>
  <property name="llg.src" value="${llg.dir}/src"/>

  <property name="compiler.source" value="1.5"/>
  <property name="compiler.target" value="1.5"/>
  <property name="compiler.debug" value="true"/>
  <property name="compiler.encoding" value="utf-8"/>

  <import file="ant/build.in.version.xml"/>
  <property file="${user.home}/update.properties"/>
  <import file="ant/build.in.update.xml"/>
  <import file="ant/build.in.android.xml"/>
  <import file="ant/build.in.vector-state.xml"/>


  <path id="lib.path">

    <fileset dir="${lib}">
      <include name="**/*.jar" />
    </fileset>
  </path>


  <available property="available.signing.properties" file="signing.properties"/>

  <!--
    - 
    -->
  <target name="signed-awt" description="Rebuild all jars and sign (from AWT)">

    <vector-state-require name="awt" property="vector.state"/>

    <antcall target="vector-update-awt" inheritRefs="true"/>

    <antcall target="awt-update" inheritRefs="true"/>

    <antcall target="demo-update-awt" inheritRefs="true"/>
    <antcall target="geda-update-awt" inheritRefs="true"/>
    <antcall target="fonview-update-awt" inheritRefs="true"/>
    <antcall target="xmpp-sign-awt" inheritRefs="true"/>

  </target>

  <target name="unsigned-awt" description="Rebuild all jars (from AWT)">

    <vector-state-require name="awt" property="vector.state"/>

    <antcall target="vector-update-awt" inheritRefs="true"/>

    <antcall target="awt-update" inheritRefs="true"/>

    <antcall target="demo-update-awt" inheritRefs="true"/>
    <antcall target="geda-update-awt" inheritRefs="true"/>
    <antcall target="fonview-update-awt" inheritRefs="true"/>
    <antcall target="xmpp-update-awt" inheritRefs="true"/>

  </target>

  <target name="help" description="Overview">
    <echo>

ant help (for portable pixel programming with vector)

      See "ant -p" for a listing of the entry points.

      The "ant signed-awt" and "ant unsigned-awt" (default) entry
      points are employed for producing operational runtimes.

      The "prove" or "prove" entry points are employed for a
      compilation test of portability.  These products have no
      runtime.  In an otherwise correct runtime, a jar compiled for
      "prove" will throw "java.lang.NoSuchMethodError" for calls to
      prove methods.

      See PLATFORM.txt for more info.

      A number of processes have been defined here for proving
      portability, and building libraries and demos.  The processes
      themselves are very basic, but numerous.  This script just glues
      together the correct identifiers for a convenient, productive,
      and reproducible process.  Dependencies are (simple) linear
      binding and construction chains.

      Some of the corner cases that are implied by the rules and
      scripts defined here are unintended.  For example,
      vector-X.Y.Z.jar can be generated with manifest class-path for
      the portability proof vector-prove-X.Y.Z.jar and then
      accidently employed in a runtime.

      The vector-state tool has been defined and employed here to
      prevent these errors.  The state of the build script reflects
      the current build platform.  The build script enters states
      "prove", "awt" or "android" from some entry points, and
      requires existing states from other entry points.

      The vector-state process simplifies the number of invalid states
      that the build directory can enter.  Invalid (secondary) states
      exist immediately after entering a state and before rebuilding
      all packages for the new platform.

    </echo>
  </target>

  <!-- 
    - PROVE
    -->
  <target name="prove" description="Prove application packages (enter Prove)">

    <vector-state-set name="prove" property="vector.state"/>

    <antcall target="prove-jar" inheritRefs="true"/>

    <antcall target="vector-jar-prove" inheritRefs="true"/>

    <!-- antcall target="demo-prove" inheritRefs="true"/ [TODO](AWT) -->
    <antcall target="geda-prove" inheritRefs="true"/>
    <antcall target="fonview-prove" inheritRefs="true"/>
    <antcall target="xmpp-prove" inheritRefs="true"/>

  </target>

  <target name="prove-vector" description="Calls prove-jar, vector-jar-prove (enter Prove)">

    <vector-state-set name="prove" property="vector.state"/>

    <antcall target="prove-jar"/>

    <antcall target="vector-jar-prove"/>

  </target>

  <target name="prove-jar" depends="prove-compile" description="Package prove jar, clean bin.">


    <echo message="Class-Path: ${prove.lib.path.manifest}"/>

    <delete file="${existing.prove.jar}"/>

    <jar jarfile="${target.prove.jar}" basedir="${bin}" >
      <manifest>

        <attribute name="Class-Path" value="${prove.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="prove-compile" depends="prove-version">

    <vector-state-require name="prove" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${prove.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.vector.jar}"/>
      </classpath>
      <bootclasspath>
        <pathelement location="${prove.rt.jar}"/>
      </bootclasspath>
    </javac>
  </target>

  <target name="prove-prove" depends="version">

    <vector-state-require name="prove" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${prove.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${target.vector.jar}"/>
      </classpath>
      <bootclasspath>
        <pathelement location="${prove.rt.jar}"/>
      </bootclasspath>
    </javac>
  </target>

  <target name="prove-version" unless="prove.lib.path.manifest" depends="version">

    <java outputproperty="prove.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true">
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - AWT
    -->
  <target name="awt" description="Calls awt-jar, vector-jar-awt (enter AWT)">

    <vector-state-set name="awt" property="vector.state"/>

    <antcall target="awt-jar"/>

    <antcall target="vector-jar-awt"/>

  </target>

  <target name="awt-update" if="vector.awt.update" depends="awt-jar" description="Copy jar product to targets defined in '{user.home}/update.properties' by name 'vector.awt.update'.">

    <do-update src="${target.awt.jar}" tgt="${vector.awt.update}" />
  </target>

  <target name="awt-jar" depends="awt-compile" description="Package awt jar, clean bin.">

    <echo message="Main-Class: platform.Frame"/>
    <echo message="Class-Path: ${awt.lib.path.manifest}"/>

    <delete file="${existing.awt.jar}"/>

    <jar jarfile="${target.awt.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="platform.Frame"/>
        <attribute name="Class-Path" value="${awt.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="awt-compile" depends="awt-version">

    <vector-state-require name="awt" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${awt.src}" includes="**/*.properties"/>
      <fileset dir="${awt.src}" includes="**/*.txt"/>
      <fileset dir="${awt.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${awt.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.vector.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="awt-version" depends="version">

    <java outputproperty="awt.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true">
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - ANDROID
    -->
  <target name="android" description="Calls android-jar, vector-jar-android (enter Android)">

    <vector-state-set name="android" property="vector.state"/>

    <antcall target="android-jar"/>

    <antcall target="vector-jar-android"/>

  </target>

  <target name="android-update" if="vector.android.update" depends="android-jar" description="Compile, archive, and copy to targets defined in '{user.home}/update.properties'.">

    <do-update src="${target.android.jar}" tgt="${vector.android.update}" />
  </target>

  <target name="android-jar" depends="android-compile" description="Package android jar, clean bin.">

    <echo message="Class-Path: ${android.lib.path.manifest}"/>

    <delete file="${existing.android.jar}"/>

    <jar jarfile="${target.android.jar}" basedir="${bin}" >
      <manifest>

        <attribute name="Class-Path" value="${android.lib.path.manifest}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="android-compile" depends="android-version">

    <vector-state-require name="android" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${android.src}" includes="**/*.properties"/>
      <fileset dir="${android.src}" includes="**/*.txt"/>
      <fileset dir="${android.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" includeJavaRuntime="false" srcdir="${android.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${target.vector.jar}"/>
      </classpath>
      <bootclasspath>
        <pathelement location="${android.rt.jar}"/>
      </bootclasspath>
    </javac>
  </target>

  <target name="android-version" depends="version">

    <define-android-rt api="10" property="android.rt.jar" />

    <fail message="Failed android.rt.jar">
      <condition>
        <not>
          <isset property="android.rt.jar"/>
        </not>
      </condition>
    </fail>

    <java outputproperty="android.lib.path.manifest" classpath="${ant}" classname="LibPathManifest" failonerror="true">
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - DEMO
    -->
  <target name="demo" depends="vector-state" description="Calls demo jar for current state">

    <antcall target="demo-jar-${vector.state}" inheritRefs="true"/>
  </target>

  <target name="demo-update-awt" depends="demo-compile-awt" description="Package demo jar, clean bin.  Depends on the target jar.">

    <echo message="Main-Class: platform.Frame"/>
    <echo message="Class-Path: ${demo.lib.path.manifest.awt}"/>

    <delete file="${existing.demo.jar}"/>

    <jar jarfile="${target.demo.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="platform.Frame"/>
        <attribute name="Class-Path" value="${demo.lib.path.manifest.awt}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="demo-compile-awt" depends="demo-version-awt">

    <vector-state-require name="awt" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${demo.src}" includes="**/*.properties"/>
      <fileset dir="${demo.src}" includes="**/*.txt"/>
      <fileset dir="${demo.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${demo.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.vector.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="demo-prove" depends="version" description="Compile against prove for proof of portability.">

    <vector-state-require name="prove" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${demo.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${target.prove.jar}"/>
      </classpath>
      <bootclasspath>
        <pathelement location="${prove.rt.jar}"/>
      </bootclasspath>
    </javac>
  </target>

  <target name="demo-version-awt" unless="demo.lib.path.manifest.awt" depends="version">

    <java outputproperty="demo.lib.path.manifest.awt" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - GEDA
    -->
  <target name="geda" depends="vector-state" description="Calls geda jar for current state">

    <antcall target="geda-jar-${vector.state}" inheritRefs="true"/>
  </target>

  <target name="geda-update-awt" depends="geda-compile-awt" description="Package geda jar, clean bin.  Depends on the target jar.">

    <echo message="Main-Class: geda.Frame"/>
    <echo message="Class-Path: ${geda.lib.path.manifest.awt}"/>

    <delete file="${existing.geda.jar}"/>

    <jar jarfile="${target.geda.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="geda.Frame"/>
        <attribute name="Class-Path" value="${geda.lib.path.manifest.awt}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="geda-compile-awt" depends="geda-version-awt">

    <vector-state-require name="awt" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${geda.src}" includes="**/*.properties"/>
      <fileset dir="${geda.src}" includes="**/*.txt"/>
      <fileset dir="${geda.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${geda.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${existing.vector.jar}"/>
        <pathelement location="${existing.awt.jar}"/>
        <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="geda-prove" depends="version" description="Compile against prove for proof of portability.">

    <vector-state-require name="prove" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${geda.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${target.prove.jar}"/>
        <path refid="lib.path"/>
      </classpath>
      <bootclasspath>
        <pathelement location="${prove.rt.jar}"/>
      </bootclasspath>
    </javac>
  </target>

  <target name="geda-version-awt" unless="geda.lib.path.manifest.awt" depends="version">

    <java outputproperty="geda.lib.path.manifest.awt" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - FONVIEW
    -->
  <target name="fonview" depends="vector-state" description="Calls fonview jar for current state">

    <antcall target="fonview-jar-${vector.state}" inheritRefs="true"/>
  </target>

  <target name="fonview-update-awt" depends="fonview-compile-awt" description="Package fonview jar, clean bin.  Depends on the target jar.">

    <echo message="Main-Class: fonview.Frame"/>
    <echo message="Class-Path: ${fonview.lib.path.manifest.awt}"/>

    <delete file="${existing.fonview.jar}"/>

    <jar jarfile="${target.fonview.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="fonview.Frame"/>
        <attribute name="Class-Path" value="${fonview.lib.path.manifest.awt}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="fonview-compile-awt" depends="fonview-version-awt">

    <vector-state-require name="awt" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${fonview.src}" includes="**/*.properties"/>
      <fileset dir="${fonview.src}" includes="**/*.txt"/>
      <fileset dir="${fonview.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${fonview.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${existing.vector.jar}"/>
        <pathelement location="${existing.awt.jar}"/>
        <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="fonview-prove" depends="version" description="Compile against prove for proof of portability.">

    <vector-state-require name="prove" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${fonview.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${target.prove.jar}"/>
        <path refid="lib.path"/>
      </classpath>
      <bootclasspath>
        <pathelement location="${prove.rt.jar}"/>
      </bootclasspath>
    </javac>
  </target>

  <target name="fonview-version-awt" unless="fonview.lib.path.manifest.awt" depends="version">

    <java outputproperty="fonview.lib.path.manifest.awt" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!-- 
    - XMPPP
    -->
  <target name="xmpp" depends="vector-state" description="Calls xmpp jar for current state">

    <antcall target="xmpp-jar-${vector.state}" inheritRefs="true"/>
  </target>

  <target name="xmpp-sign-awt" if="available.signing.properties" depends="xmpp-jar-awt" description="Sign jars required by xmpp.jnlp">

    <property file="signing.properties"/>

    <fail unless="sign.keystore">
      Missing property "sign.keystore" in "signing.properties" 
    </fail>
    <fail unless="sign.alias">
      Missing property "sign.alias" in "signing.properties" 
    </fail>
    <fail unless="sign.storepass">
      Missing property "sign.storepass" in "signing.properties" 
    </fail>
    <fail unless="sign.keypass">
      Missing property "sign.keypass" in "signing.properties" 
    </fail>

    <signjar keystore="${sign.keystore}" alias="${sign.alias}" storepass="${sign.storepass}" keypass="${sign.keypass}">

      <path>
        <pathelement location="${target.awt.jar}"/>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${target.xmpp.jar}"/>
        <path refid="lib.path" />
        <path refid="xmpp.lib.path" />
      </path>
    </signjar>

  </target>
  <target name="xmpp-update-awt" if="vector.xmpp.update" depends="xmpp-jar-awt" description="Compile, archive, and copy to targets defined in '{user.home}/update.properties'.">

    <do-update src="${target.xmpp.jar}" tgt="${vector.xmpp.update}" />
  </target>

  <target name="xmpp-jar-awt" depends="xmpp-compile-awt" description="Package xmpp jar, clean bin.  Depends on the target jar.">

    <echo message="Main-Class: xmpp.Frame"/>

    <delete file="${existing.xmpp.jar}"/>

    <jar jarfile="${target.xmpp.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="xmpp.Frame"/>
        <attribute name="Class-Path" value="${xmpp.lib.path.manifest.awt}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="xmpp-compile-awt" depends="xmpp-version">

    <vector-state-require name="awt" property="vector.state"/>

    <echo message="Class-Path: ${xmpp.lib.path.manifest.awt}"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${xmpp.src}" includes="**/*.properties"/>
      <fileset dir="${xmpp.src}" includes="**/*.txt"/>
      <fileset dir="${xmpp.src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${xmpp.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${existing.vector.jar}"/>
        <pathelement location="${existing.awt.jar}"/>
        <path refid="lib.path"/>
        <path refid="xmpp.lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="xmpp-prove" depends="xmpp-version" description="Compile against prove for proof of portability.">

    <vector-state-require name="prove" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${xmpp.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${target.prove.jar}"/>
        <path refid="lib.path"/>
        <path refid="xmpp.lib.path"/>
      </classpath>
      <bootclasspath>
        <pathelement location="${prove.rt.jar}"/>
      </bootclasspath>
    </javac>
  </target>

  <target name="xmpp-version" unless="xmpp.lib.path.manifest.awt" depends="version">

    <path id="xmpp.lib.path">

      <fileset dir="${xmpp.dir}/lib">
        <include name="**/*.jar" />
      </fileset>
    </path>

    <java outputproperty="xmpp.lib.path.manifest.awt" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
      <arg value="${toString:xmpp.lib.path}"/>
    </java>
  </target>

  <!-- 
    - LLG (offline notes)
    -->
  <target name="llg-update-awt" depends="llg-compile-awt" description="Compile, archive, and copy to targets defined in '{user.home}/update.properties'.">

    <echo message="Main-Class: llg.Fullscreen"/>
    <echo message="Class-Path: ${llg.lib.path.manifest.awt}"/>

    <delete file="${existing.llg.jar}"/>

    <jar jarfile="${target.llg.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="llg.Fullscreen"/>
        <attribute name="Class-Path" value="${llg.lib.path.manifest.awt}"/>
      </manifest>
    </jar>

    <delete dir="${bin}"/>
  </target>

  <target name="llg-compile-awt" depends="llg-version">

    <vector-state-require name="awt" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}/fonts">
      <fileset dir="${llg.dir}/fonts" includes="**/futural.jhf,**/markers.jhf"/>
    </copy>
    <copy todir="${bin}/models">
      <fileset dir="${llg.dir}/models" includes="**/*.emf"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${llg.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${existing.vector.jar}"/>
        <pathelement location="${existing.awt.jar}"/>
        <path refid="lib.path"/>
      </classpath>
    </javac>
  </target>

  <target name="llg-prove" depends="version" description="Compile against prove for proof of portability.">

    <vector-state-require name="prove" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${llg.src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <pathelement location="${target.vector.jar}"/>
        <pathelement location="${existing.prove.jar}"/>
        <path refid="lib.path"/>
      </classpath>
      <bootclasspath>
        <pathelement location="${prove.rt.jar}"/>
      </bootclasspath>
    </javac>
  </target>

  <target name="llg-version" unless="llg.lib.path.manifest.awt" depends="version">

    <java outputproperty="llg.lib.path.manifest.awt" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${target.vector.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!--
    - VECTOR
    -->
  <target name="vector" depends="vector-state" description="Calls vector jar for current state">

    <antcall target="vector-jar-${vector.state}" inheritRefs="true"/>
  </target>

  <target name="vector-prove" description="Calls vector-jar-prove, prove-jar (enter Prove)">

    <vector-state-set name="prove" property="vector.state"/>

    <antcall target="vector-jar-prove" inheritRefs="true"/>

    <antcall target="prove-jar" inheritRefs="true"/>
  </target>

  <target name="vector-awt" description="Calls vector-jar-awt, awt-jar  (enter AWT)">

    <vector-state-set name="awt" property="vector.state"/>

    <antcall target="vector-jar-awt" inheritRefs="true"/>

    <antcall target="awt-jar" inheritRefs="true"/>
  </target>

  <target name="vector-android" description="Calls vector-jar-android, android (enter Android)">

    <vector-state-set name="android" property="vector.state"/>

    <antcall target="vector-jar-android" inheritRefs="true"/>

    <antcall target="android" inheritRefs="true"/>
  </target>

  <target name="vector-state" description="Report the build directory platform">

    <vector-state-get property="vector.state"/>
  </target>

  <target name="vector-update-awt" if="vector.update" depends="vector-jar-awt" description="Compile, archive, and copy to targets defined in '{user.home}/update.properties'.">

    <do-update src="${target.vector.jar}" tgt="${vector.update}" />
  </target>

  <target name="vector-jar-awt" depends="vector-compile-awt" description="Package bin to target jar, clean bin.">

    <echo message="Main-Class: platform.Frame"/>
    <echo message="Class-Path: ${vector.lib.path.manifest.awt}"/>

    <delete file="${existing.vector.jar}"/>
    <jar jarfile="${target.vector.jar}" basedir="${bin}" >
      <manifest>
        <attribute name="Main-Class" value="platform.Frame"/>
        <attribute name="Class-Path" value="${vector.lib.path.manifest.awt}"/>
      </manifest>
    </jar>
    <delete dir="${bin}"/>
  </target>

  <target name="vector-compile-awt" depends="vector-version-awt" description="Compile src to bin">

    <vector-state-require name="awt" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${src}" includes="**/*.properties"/>
      <fileset dir="${src}" includes="**/*.txt"/>
      <fileset dir="${src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           classpathref="lib.path" source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.awt.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="vector-update-android" if="vector.update" depends="vector-jar-android" description="Compile, archive, and copy to targets defined in '{user.home}/update.properties'.">

    <do-update src="${target.vector.jar}" tgt="${vector.update}" />
  </target>

  <target name="vector-jar-android" depends="vector-compile-android" description="Package bin to target jar, clean bin.">

    <echo message="Class-Path: ${vector.lib.path.manifest.android}"/>

    <delete file="${existing.vector.jar}"/>
    <jar jarfile="${target.vector.jar}" basedir="${bin}" >
      <manifest>

        <attribute name="Class-Path" value="${vector.lib.path.manifest.android}"/>
      </manifest>
    </jar>
    <delete dir="${bin}"/>
  </target>

  <target name="vector-compile-android" depends="vector-version-android" description="Compile src to bin">

    <vector-state-require name="android" property="vector.state"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>
    <copy todir="${bin}">
      <fileset dir="${src}" includes="**/*.properties"/>
      <fileset dir="${src}" includes="**/*.txt"/>
      <fileset dir="${src}" includes="**/*.xml"/>
    </copy>
    <javac includeAntRuntime="false" srcdir="${src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           classpathref="lib.path" source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.android.jar}"/>
        <pathelement location="${android.rt.jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="vector-jar-prove" unless="cond.vector.jar.prove" depends="vector-compile-prove" description="Package bin to target jar, clean bin.">

    <property name="cond.vector.jar.prove" value="false"/>


    <echo message="Class-Path: ${vector.lib.path.manifest.prove}"/>

    <delete file="${existing.vector.jar}"/>
    <jar jarfile="${target.vector.jar}" basedir="${bin}" >
      <manifest>

        <attribute name="Class-Path" value="${vector.lib.path.manifest.prove}"/>
      </manifest>
    </jar>
    <delete dir="${bin}"/>
  </target>

  <target name="vector-compile-prove" unless="cond.vector.prove" depends="vector-version-prove" description="Compile against prove for proof of portability.">

    <vector-state-require name="prove" property="vector.state"/>

    <property name="cond.vector.prove" value="false"/>

    <delete dir="${bin}"/>
    <mkdir dir="${bin}"/>

    <javac includeAntRuntime="false" srcdir="${src}" destdir="${bin}" debug="${compiler.debug}" encoding="${compiler.encoding}"
           classpathref="lib.path" source="${compiler.source}" target="${compiler.target}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="${existing.prove.jar}"/>
      </classpath>
      <bootclasspath>
        <pathelement location="${prove.rt.jar}"/>
      </bootclasspath>
    </javac>
  </target>
 
  <target name="vector-version-awt" unless="vector.lib.path.manifest.awt" depends="version">

    <java outputproperty="vector.lib.path.manifest.awt" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.awt.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <target name="vector-version-android" unless="vector.lib.path.manifest.android" depends="android-version">

    <java outputproperty="vector.lib.path.manifest.android" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.android.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

 <target name="vector-version-prove" unless="vector.lib.path.manifest.prove" depends="version">

    <java outputproperty="vector.lib.path.manifest.prove" classpath="${ant}" classname="LibPathManifest" failonerror="true" fork="true">
      <arg value="${target.prove.jar}"/>
      <arg value="${toString:lib.path}"/>
    </java>
  </target>

  <!--
    - 
    -->
  <target name="clean" description="Delete products">
    <delete dir="${bin}"/>
    <!-- <![CDATA[delete dir="${dst}">
      <include name="**/*.jar" />
    </delete ]]> -->
  </target>

  <!--
    - VERSION
    -->
  <target name="version" unless="this.version" description="Report current version.">
    <version/>
    <property name="target.vector.jar" value="${dst}/${ant.project.name}-${this.version}.jar"/>
    <property name="target.prove.jar" value="${dst}/${ant.project.name}-prove-${this.version}.jar"/>
    <property name="target.awt.jar" value="${dst}/${ant.project.name}-awt-${this.version}.jar"/>
    <property name="target.android.jar" value="${dst}/${ant.project.name}-android-${this.version}.jar"/>
    <property name="target.demo.jar" value="${dst}/${ant.project.name}-demo-${this.version}.jar"/>
    <property name="target.geda.jar" value="${dst}/${ant.project.name}-geda-${this.version}.jar"/>
    <property name="target.fonview.jar" value="${dst}/${ant.project.name}-fonview-${this.version}.jar"/>
    <property name="target.xmpp.jar" value="${dst}/${ant.project.name}-xmpp-${this.version}.jar"/>
    <property name="target.jogl.jar" value="${dst}/${ant.project.name}-jogl-${this.version}.jar"/>
    <property name="target.llg.jar" value="${dst}/${ant.project.name}-llg-${this.version}.jar"/>

    <version-pub property="existing.vector.jar" prefix="${ant.project.name}"/>

    <version-pub property="existing.prove.jar" prefix="${ant.project.name}-prove"/>

    <version-pub property="existing.awt.jar" prefix="${ant.project.name}-awt"/>

    <version-pub property="existing.android.jar" prefix="${ant.project.name}-android"/>

    <version-pub property="existing.demo.jar" prefix="${ant.project.name}-demo"/>

    <version-pub property="existing.geda.jar" prefix="${ant.project.name}-geda"/>

    <version-pub property="existing.fonview.jar" prefix="${ant.project.name}-fonview"/>

    <version-pub property="existing.xmpp.jar" prefix="${ant.project.name}-xmpp"/>

    <version-pub property="existing.jogl.jar" prefix="${ant.project.name}-jogl"/>

    <version-pub property="existing.llg.jar" prefix="${ant.project.name}-llg"/>


  </target>

  <target name="build" description="Increment version build number and report result.">
    <version-build/>
    <version/>
  </target>

  <target name="major" description="Increment version major number and report result.">
    <version-major/>
    <version/>
  </target>

  <target name="minor" description="Increment version minor number and report result.">
    <version-minor/>
    <version/>
  </target>

</project>
